// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User { 
  id String @id @default(uuid())
  name String
  email String @unique
  password String 
  accounts Account[]
  categories Category[]
  transactions Transaction[]
  budgets Budget[]
  goals Goal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
} 

model Account {
  id String @id @default(uuid())
  name String
  type String  //ex: corrente, poupan√ßa, carteira digital
  balance Float @default(0)
  user User @relation(fields: [userId], references: [id])
  userId String 
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Category {
  id String @id @default(uuid())
  name String
  type String //ex: receita, despesa
  user User @relation(fields: [userId], references: [id])
  userId String
  transactions Transaction[]
  budgets Budget[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Transaction {
  id String @id @default(uuid())
  amount Float
  date DateTime
  description String?
  account Account @relation(fields: [accountId], references: [id])
  accountId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Budget {
  id String @id @default(uuid())
  amount Float
  month Int
  year Int
  category Category @relation(fields: [categoryId], references:[id])
  categoryId String 
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Goal { 
  id String @id @default(uuid())
  name String 
  target Float
  current Float @default(0)
  deadline DateTime?
  user User @relation(fields: [userId], references:[id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}